-- 2025-03-21
-- Friedman‚Äôs A-Translation
-- https://www.mscs.dal.ca/~selinger/papers/friedman.pdf

module Selinger92 where

open import Agda.Builtin.FromNat using (Number ; fromNat)

open import Data.Empty using (‚ä•)
  renaming (‚ä•-elim to abort)

import Data.Fin as Fin
open Fin using (Fin ; zero ; suc)

import Data.List as List
open List using (List ; [] ; _‚à∑_)

import Data.Nat as Nat
open Nat using (zero ; suc)
  renaming (‚Ñï to Nat)

open import Data.Product using (Œ£ ; _,_ ; _√ó_)
  renaming (proj‚ÇÅ to fst ; proj‚ÇÇ to snd)

open import Data.Sum using (_‚äé_)
  renaming (inj‚ÇÅ to left ; inj‚ÇÇ to right)

open import Data.Unit using (‚ä§ ; tt)

import Data.Vec as Vec
open Vec using (Vec ; [] ; _‚à∑_)
  renaming (tabulate to tab)

import Data.Vec.Properties as Vec

import Function as Fun
open Fun using (_‚àò_ ; _$_ ; flip)

import Level
open Level using (_‚äî_ ; Level)

open import Relation.Binary.PropositionalEquality
  using (_‚â°_ ; refl ; sym ; trans ; subst ; cong ; cong‚ÇÇ ; module ‚â°-Reasoning)

open import Relation.Nullary using (Dec ; yes ; no ; ¬¨_)
  renaming (contradiction to _‚ÜØ_)

open import Relation.Nullary.Decidable using (True)


----------------------------------------------------------------------------------------------------

-- missing things

instance
  numberNat : Number Nat
  numberNat = record
    { Constraint = Œª _ ‚Üí ‚ä§
    ; fromNat    = Œª n ‚Üí n
    }

instance
  numberFin : ‚àÄ {n} ‚Üí Number (Fin n)
  numberFin {n} = record
    { Constraint = Œª m ‚Üí True (m Nat.<? n)
    ; fromNat    = Œª m {{p}} ‚Üí (Fin.# m) {n} {p}
    }


----------------------------------------------------------------------------------------------------

-- vector things

get : ‚àÄ {ùí∂} {A : Set ùí∂} {n} ‚Üí Fin n ‚Üí Vec A n ‚Üí A
get i xs = Vec.lookup xs i

put : ‚àÄ {ùí∂} {A : Set ùí∂} {n} ‚Üí Fin n ‚Üí Vec A n ‚Üí A ‚Üí Vec A n
put i xs y = xs Vec.[ i ]‚âî y

for : ‚àÄ {ùí∂ ùí∑} {A : Set ùí∂} {B : Set ùí∑} {n} ‚Üí Vec A n ‚Üí (A ‚Üí B) ‚Üí Vec B n
for xs f = Vec.map f xs


----------------------------------------------------------------------------------------------------

-- untyped de Bruijn indices and order-preserving embeddings for term variables

-- data Fin : Nat ‚Üí Set where
--   zero : Fin (suc n)
--   suc  : ‚àÄ (i : Fin n) ‚Üí Fin (suc n)

infix 3 _‚â§_
data _‚â§_ : Nat ‚Üí Nat ‚Üí Set where
  stop  : zero ‚â§ zero
  wk‚â§   : ‚àÄ {k k‚Ä≤} (Œ∑ : k ‚â§ k‚Ä≤) ‚Üí k ‚â§ suc k‚Ä≤
  lift‚â§ : ‚àÄ {k k‚Ä≤} (Œ∑ : k ‚â§ k‚Ä≤) ‚Üí suc k ‚â§ suc k‚Ä≤

id‚â§ : ‚àÄ {k} ‚Üí k ‚â§ k
id‚â§ {zero}  = stop
id‚â§ {suc k} = lift‚â§ id‚â§

renFin : ‚àÄ {k k‚Ä≤} ‚Üí k ‚â§ k‚Ä≤ ‚Üí Fin k ‚Üí Fin k‚Ä≤
renFin stop      i       = i
renFin (wk‚â§ Œ∑)   i       = suc (renFin Œ∑ i)
renFin (lift‚â§ Œ∑) zero    = zero
renFin (lift‚â§ Œ∑) (suc i) = renFin (wk‚â§ Œ∑) i

wkFin : ‚àÄ {k} ‚Üí Fin k ‚Üí Fin (suc k)
wkFin = renFin (wk‚â§ id‚â§)


----------------------------------------------------------------------------------------------------

-- primitive recursive n-ary functions on naturals
-- Troelstra (1973) ¬ß1.3.4

mutual
  data Prim : Nat ‚Üí Set where
    zero : Prim 0
    suc  : Prim 1
    proj : ‚àÄ {n} (i : Fin n) ‚Üí Prim n
    comp : ‚àÄ {n m} (g : Prim m) (fs : Prim¬ß n m) ‚Üí Prim n
    rec  : ‚àÄ {n} (f : Prim n) (g : Prim (suc (suc n))) ‚Üí Prim (suc n)

  Prim¬ß : Nat ‚Üí Nat ‚Üí Set
  Prim¬ß n m = Vec (Prim n) m

Nat¬ß : Nat ‚Üí Set
Nat¬ß n = Vec Nat n

Fun : Nat ‚Üí Set
Fun n = Nat¬ß n ‚Üí Nat

Fun¬ß : Nat ‚Üí Nat ‚Üí Set
Fun¬ß n m = Vec (Fun n) m

#zero : Fun 0
#zero [] = zero

#suc : Fun 1
#suc (x ‚à∑ []) = suc x

#proj : ‚àÄ {n} ‚Üí Fin n ‚Üí Fun n
#proj i xs = get i xs

#comp : ‚àÄ {n m} ‚Üí Fun m ‚Üí Fun¬ß n m ‚Üí Fun n
#comp g fs xs = g (for fs (_$ xs))

#rec : ‚àÄ {n} ‚Üí Fun n ‚Üí Fun (suc (suc n)) ‚Üí Fun (suc n)
#rec f g (zero  ‚à∑ ys) = f ys
#rec f g (suc x ‚à∑ ys) = g (#rec f g (x ‚à∑ ys) ‚à∑ x ‚à∑ ys)

mutual
  ‚ü¶_‚üß : ‚àÄ {n} ‚Üí Prim n ‚Üí Fun n
  ‚ü¶ zero ‚üß      = #zero
  ‚ü¶ suc ‚üß       = #suc
  ‚ü¶ proj i ‚üß    = #proj i
  ‚ü¶ comp g fs ‚üß = #comp ‚ü¶ g ‚üß ‚ü¶ fs ‚üß¬ß
  ‚ü¶ rec f g ‚üß   = #rec ‚ü¶ f ‚üß ‚ü¶ g ‚üß

  ‚ü¶_‚üß¬ß : ‚àÄ {n m} ‚Üí Prim¬ß n m ‚Üí Fun¬ß n m
  ‚ü¶ [] ‚üß¬ß     = []
  ‚ü¶ f ‚à∑ fs ‚üß¬ß = ‚ü¶ f ‚üß ‚à∑ ‚ü¶ fs ‚üß¬ß


----------------------------------------------------------------------------------------------------

-- some primitive recursive n-ary functions on naturals
-- Troelstra and van Dalen (1988) ¬ß1.3

const : ‚àÄ {n} ‚Üí Nat ‚Üí Prim n
const zero    = comp zero []
const (suc x) = comp suc (const x ‚à∑ [])

ok-const : ‚àÄ x ‚Üí ‚ü¶ const x ‚üß [] ‚â° Fun.const {B = Nat¬ß 0} x []
ok-const zero    = refl
ok-const (suc x) = cong suc (ok-const x)

-- _+_ : Nat ‚Üí Nat ‚Üí Nat
-- zero  + y = y
-- suc x + y = suc (x + y)

add : Prim 2
add = rec (proj 0)
          (comp suc (proj 0 ‚à∑ []))

ok-add : ‚àÄ x y ‚Üí ‚ü¶ add ‚üß (x ‚à∑ y ‚à∑ []) ‚â° x Nat.+ y
ok-add zero    y = refl
ok-add (suc x) y = cong suc (ok-add x y)

-- _*_ : Nat ‚Üí Nat ‚Üí Nat
-- zero  * y = zero
-- suc x * y = y + x * y

mul : Prim 2
mul = rec (const 0)
          (comp add (proj 2 ‚à∑ proj 0 ‚à∑ []))

module _ where
  open ‚â°-Reasoning

  ok-mul : ‚àÄ x y ‚Üí ‚ü¶ mul ‚üß (x ‚à∑ y ‚à∑ []) ‚â° x Nat.* y
  ok-mul zero    y = refl
  ok-mul (suc x) y = begin
                       ‚ü¶ add ‚üß (y ‚à∑ ‚ü¶ mul ‚üß (x ‚à∑ y ‚à∑ []) ‚à∑ [])
                     ‚â°‚ü® cong (‚ü¶ add ‚üß ‚àò (y ‚à∑_)) (cong (_‚à∑ []) (ok-mul x y))  ‚ü©
                       ‚ü¶ add ‚üß (y ‚à∑ x Nat.* y ‚à∑ [])
                     ‚â°‚ü® ok-add y (x Nat.* y) ‚ü©
                       y Nat.+ x Nat.* y
                     ‚àé

-- pred : Nat ‚Üí Nat
-- pred x = x ‚à∏ 1

pred : Prim 1
pred = rec (const 0)
           (proj 1)

ok-pred : ‚àÄ x ‚Üí ‚ü¶ pred ‚üß (x ‚à∑ []) ‚â° Nat.pred x
ok-pred zero    = refl
ok-pred (suc x) = refl

-- TODO: subtraction

-- _‚à∏_ : Nat ‚Üí Nat ‚Üí Nat
-- x     ‚à∏ zero  = x
-- zero  ‚à∏ suc y = zero
-- suc x ‚à∏ suc y = x ‚à∏ y

-- _-_ : Nat ‚Üí Nat ‚Üí Nat
-- x - zero  = x
-- x - suc y = pred (x - y)


----------------------------------------------------------------------------------------------------

-- first-order predicate logic with one sort (naturals) and one predicate (equality)

infix  19 _‚Äµ=_ _‚Äµ‚â†_
infixl 18 _‚Äµ‚àß_ _‚Äµ‚à®_
infixr 17 _‚Äµ‚äÉ_ _‚Äµ‚´ó_
infixr 16 _‚Äµ$_

-- terms, indexed by number of term variables
mutual
  data Tm (k : Nat) : Set where
    ‚Äµvar : ‚àÄ (i : Fin k) ‚Üí Tm k -- i-th term variable
    ‚Äµfun : ‚àÄ {n} (f : Prim n) (ts : Tm¬ß k n) ‚Üí Tm k

  Tm¬ß : Nat ‚Üí Nat ‚Üí Set
  Tm¬ß k n = Vec (Tm k) n

instance
  numberTm : ‚àÄ {k} ‚Üí Number (Tm k)
  numberTm {k} = record
    { Constraint = Œª m ‚Üí True (m Nat.<? k)
    ; fromNat    = Œª m {{p}} ‚Üí ‚Äµvar ((Fin.# m) {k} {p})
    }

‚Äµzero : ‚àÄ {k} ‚Üí Tm k
‚Äµzero = ‚Äµfun zero []

‚Äµsuc : ‚àÄ {k} ‚Üí Tm k ‚Üí Tm k
‚Äµsuc t = ‚Äµfun suc (t ‚à∑ [])

-- formulas, indexed by number of term variables
data Fm (k : Nat) : Set where
  _‚Äµ‚äÉ_ : ‚àÄ (A B : Fm k) ‚Üí Fm k
  _‚Äµ‚àß_ : ‚àÄ (A B : Fm k) ‚Üí Fm k
  _‚Äµ‚à®_ : ‚àÄ (A B : Fm k) ‚Üí Fm k
  ‚Äµ‚àÄ_  : ‚àÄ (A : Fm (suc k)) ‚Üí Fm k
  ‚Äµ‚àÉ_  : ‚àÄ (A : Fm (suc k)) ‚Üí Fm k
  ‚Äµ‚ä•  : Fm k
  _‚Äµ=_ : ‚àÄ (t u : Tm k) ‚Üí Fm k

Fm¬ß : Nat ‚Üí Set
Fm¬ß k = List (Fm k)

_‚Äµ‚´ó_ : ‚àÄ {k} ‚Üí Fm k ‚Üí Fm k ‚Üí Fm k
A ‚Äµ‚´ó B = (A ‚Äµ‚äÉ B) ‚Äµ‚àß (B ‚Äµ‚äÉ A)

‚Äµ¬¨_ : ‚àÄ {k} ‚Üí Fm k ‚Üí Fm k
‚Äµ¬¨ A = A ‚Äµ‚äÉ ‚Äµ‚ä•

_‚Äµ‚â†_ : ‚àÄ {k} ‚Üí Tm k ‚Üí Tm k ‚Üí Fm k
t ‚Äµ‚â† u = ‚Äµ¬¨ (t ‚Äµ= u)


----------------------------------------------------------------------------------------------------

-- typed de Bruijn indices and order-preserving embeddings for derivation variables

infix 3 _‚àã_
data _‚àã_ {k} : Fm¬ß k ‚Üí Fm k ‚Üí Set where
  zero : ‚àÄ {Œì A} ‚Üí A ‚à∑ Œì ‚àã A
  suc  : ‚àÄ {Œì A C} (i : Œì ‚àã A) ‚Üí C ‚à∑ Œì ‚àã A

infix 3 _‚àã‚ü®_‚ü©_
data _‚àã‚ü®_‚ü©_ {k} : Fm¬ß k ‚Üí Nat ‚Üí Fm k ‚Üí Set where
  instance
    zero : ‚àÄ {Œì A} ‚Üí A ‚à∑ Œì ‚àã‚ü® zero ‚ü© A
  suc : ‚àÄ {Œì m A C} (i : Œì ‚àã‚ü® m ‚ü© A) ‚Üí C ‚à∑ Œì ‚àã‚ü® suc m ‚ü© A

instance
  suc‚àã# : ‚àÄ {k} {Œì : Fm¬ß k} {m A C} {{i : Œì ‚àã‚ü® m ‚ü© A}} ‚Üí C ‚à∑ Œì ‚àã‚ü® suc m ‚ü© A
  suc‚àã# {{i}} = suc i

‚àã#‚Üí‚àã : ‚àÄ {m k} {Œì : Fm¬ß k} {A} ‚Üí Œì ‚àã‚ü® m ‚ü© A ‚Üí Œì ‚àã A
‚àã#‚Üí‚àã zero    = zero
‚àã#‚Üí‚àã (suc i) = suc (‚àã#‚Üí‚àã i)

instance
  number‚àã : ‚àÄ {k} {Œì : Fm¬ß k} {A} ‚Üí Number (Œì ‚àã A)
  number‚àã {Œì = Œì} {A} = record
    { Constraint = Œª m ‚Üí Œì ‚àã‚ü® m ‚ü© A
    ; fromNat    = Œª m {{p}} ‚Üí ‚àã#‚Üí‚àã p
    }

infix 3 _‚äÜ_
data _‚äÜ_ {k} : Fm¬ß k ‚Üí Fm¬ß k ‚Üí Set where
  stop  : [] ‚äÜ []
  wk‚äÜ   : ‚àÄ {Œì Œì‚Ä≤ C} (Œ∑ : Œì ‚äÜ Œì‚Ä≤) ‚Üí Œì ‚äÜ C ‚à∑ Œì‚Ä≤
  lift‚äÜ : ‚àÄ {Œì Œì‚Ä≤ C} (Œ∑ : Œì ‚äÜ Œì‚Ä≤) ‚Üí C ‚à∑ Œì ‚äÜ C ‚à∑ Œì‚Ä≤

id‚äÜ : ‚àÄ {k} {Œì : Fm¬ß k} ‚Üí Œì ‚äÜ Œì
id‚äÜ {Œì = []}    = stop
id‚äÜ {Œì = A ‚à∑ Œì} = lift‚äÜ id‚äÜ

ren‚àã : ‚àÄ {k} {Œì Œì‚Ä≤ : Fm¬ß k} {A} ‚Üí Œì ‚äÜ Œì‚Ä≤ ‚Üí Œì ‚àã A ‚Üí Œì‚Ä≤ ‚àã A
ren‚àã stop      i       = i
ren‚àã (wk‚äÜ Œ∑)   i       = suc (ren‚àã Œ∑ i)
ren‚àã (lift‚äÜ Œ∑) zero    = zero
ren‚àã (lift‚äÜ Œ∑) (suc i) = ren‚àã (wk‚äÜ Œ∑) i

wk‚àã : ‚àÄ {k} {Œì : Fm¬ß k} {A C} ‚Üí Œì ‚àã A ‚Üí C ‚à∑ Œì ‚àã A
wk‚àã = ren‚àã (wk‚äÜ id‚äÜ)


----------------------------------------------------------------------------------------------------

-- renaming for terms and formulas

mutual
  trenTm : ‚àÄ {k k‚Ä≤} ‚Üí k ‚â§ k‚Ä≤ ‚Üí Tm k ‚Üí Tm k‚Ä≤
  trenTm Œ∑ (‚Äµvar i)    = ‚Äµvar (renFin Œ∑ i)
  trenTm Œ∑ (‚Äµfun f ts) = ‚Äµfun f (trenTm¬ß Œ∑ ts)

  trenTm¬ß : ‚àÄ {k k‚Ä≤ n} ‚Üí k ‚â§ k‚Ä≤ ‚Üí Tm¬ß k n ‚Üí Tm¬ß k‚Ä≤ n
  trenTm¬ß Œ∑ []       = []
  trenTm¬ß Œ∑ (t ‚à∑ ts) = trenTm Œ∑ t ‚à∑ trenTm¬ß Œ∑ ts

trenFm : ‚àÄ {k k‚Ä≤} ‚Üí k ‚â§ k‚Ä≤ ‚Üí Fm k ‚Üí Fm k‚Ä≤
trenFm Œ∑ (A ‚Äµ‚äÉ B) = trenFm Œ∑ A ‚Äµ‚äÉ trenFm Œ∑ B
trenFm Œ∑ (A ‚Äµ‚àß B) = trenFm Œ∑ A ‚Äµ‚àß trenFm Œ∑ B
trenFm Œ∑ (A ‚Äµ‚à® B) = trenFm Œ∑ A ‚Äµ‚à® trenFm Œ∑ B
trenFm Œ∑ (‚Äµ‚àÄ A)   = ‚Äµ‚àÄ trenFm (lift‚â§ Œ∑) A
trenFm Œ∑ (‚Äµ‚àÉ A)   = ‚Äµ‚àÉ trenFm (lift‚â§ Œ∑) A
trenFm Œ∑ ‚Äµ‚ä•      = ‚Äµ‚ä•
trenFm Œ∑ (t ‚Äµ= u) = trenTm Œ∑ t ‚Äµ= trenTm Œ∑ u

trenFm¬ß : ‚àÄ {k k‚Ä≤} ‚Üí k ‚â§ k‚Ä≤ ‚Üí Fm¬ß k ‚Üí Fm¬ß k‚Ä≤
trenFm¬ß Œ∑ []      = []
trenFm¬ß Œ∑ (A ‚à∑ Œì) = trenFm Œ∑ A ‚à∑ trenFm¬ß Œ∑ Œì

-- weaken formula by adding one unused term variable
twkFm : ‚àÄ {k} ‚Üí Fm k ‚Üí Fm (suc k)
twkFm = trenFm (wk‚â§ id‚â§)

-- weaken formulas by adding one unused term variable
twkFm¬ß : ‚àÄ {k} ‚Üí Fm¬ß k ‚Üí Fm¬ß (suc k)
twkFm¬ß = trenFm¬ß (wk‚â§ id‚â§)

tren‚äÜ : ‚àÄ {k k‚Ä≤ Œì Œì‚Ä≤} (Œ∑ : k ‚â§ k‚Ä≤) ‚Üí Œì ‚äÜ Œì‚Ä≤ ‚Üí trenFm¬ß Œ∑ Œì ‚äÜ trenFm¬ß Œ∑ Œì‚Ä≤
tren‚äÜ Œ∑ stop      = stop
tren‚äÜ Œ∑ (wk‚äÜ Œ∂)   = wk‚äÜ (tren‚äÜ Œ∑ Œ∂)
tren‚äÜ Œ∑ (lift‚äÜ Œ∂) = lift‚äÜ (tren‚äÜ Œ∑ Œ∂)

twk‚äÜ : ‚àÄ {k} {Œì Œì‚Ä≤ : Fm¬ß k} ‚Üí Œì ‚äÜ Œì‚Ä≤ ‚Üí twkFm¬ß Œì ‚äÜ twkFm¬ß Œì‚Ä≤
twk‚äÜ = tren‚äÜ (wk‚â§ id‚â§)


----------------------------------------------------------------------------------------------------

-- TODO: substitution for terms and formulas

postulate
  -- exchange two topmost term variables in formula
  texFm : ‚àÄ {k} (A : Fm (suc (suc k))) ‚Üí Fm (suc (suc k))

  -- substitute topmost term variable in formula by term
  _[_] : ‚àÄ {k} (A : Fm (suc k)) (s : Tm k) ‚Üí Fm k

  -- TODO: this should follow from one of the substitution lemmas
  TODO1 : ‚àÄ {k} {A : Fm (suc k)} ‚Üí A ‚â° (trenFm (lift‚â§ (wk‚â§ id‚â§)) A [ 0 ])


----------------------------------------------------------------------------------------------------

-- Heyting and Peano arithmetic
data Theory : Set where
  HA : Theory
  PA : Theory

-- derivations, indexed by list of derivation variables
infix 3 _/_‚ä¢_
data _/_‚ä¢_ {k} : Theory ‚Üí Fm¬ß k ‚Üí Fm k ‚Üí Set where
  ‚Äµvar     : ‚àÄ {Œò Œì A} (i : Œì ‚àã A) ‚Üí Œò / Œì ‚ä¢ A -- i-th derivation variable
  ‚Äµlam     : ‚àÄ {Œò Œì A B} (d : Œò / A ‚à∑ Œì ‚ä¢ B) ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚äÉ B
  _‚Äµ$_     : ‚àÄ {Œò Œì A B} (d : Œò / Œì ‚ä¢ A ‚Äµ‚äÉ B) (e : Œò / Œì ‚ä¢ A) ‚Üí Œò / Œì ‚ä¢ B
  ‚Äµpair    : ‚àÄ {Œò Œì A B} (d : Œò / Œì ‚ä¢ A) (e : Œò / Œì ‚ä¢ B) ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚àß B
  ‚Äµfst     : ‚àÄ {Œò Œì A B} (d : Œò / Œì ‚ä¢ A ‚Äµ‚àß B) ‚Üí Œò / Œì ‚ä¢ A
  ‚Äµsnd     : ‚àÄ {Œò Œì A B} (d : Œò / Œì ‚ä¢ A ‚Äµ‚àß B) ‚Üí Œò / Œì ‚ä¢ B
  ‚Äµleft    : ‚àÄ {Œò Œì A B} (d : Œò / Œì ‚ä¢ A) ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚à® B
  ‚Äµright   : ‚àÄ {Œò Œì A B} (d : Œò / Œì ‚ä¢ B) ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚à® B
  ‚Äµeither  : ‚àÄ {Œò Œì A B C} (c : Œò / Œì ‚ä¢ A ‚Äµ‚à® B) (d : Œò / A ‚à∑ Œì ‚ä¢ C) (e : Œò / B ‚à∑ Œì ‚ä¢ C) ‚Üí
               Œò / Œì ‚ä¢ C

  --     A(x‚ÇÄ)
  -- --------------
  --   ‚àÄy.A[y/x‚Çí]
  ‚Äµall     : ‚àÄ {Œò Œì A} (d : Œò / twkFm¬ß Œì ‚ä¢ A) ‚Üí Œò / Œì ‚ä¢ ‚Äµ‚àÄ A

  --   ‚àÄy.A[y/x‚ÇÄ]
  -- --------------
  --    A[t/x‚ÇÄ]
  ‚Äµone     : ‚àÄ {Œò Œì A t A[t]} (d : Œò / Œì ‚ä¢ ‚Äµ‚àÄ A) (p : A[t] ‚â° A [ t ]) ‚Üí Œò / Œì ‚ä¢ A[t]

  --    A[t/x‚ÇÄ]
  -- --------------
  --   ‚àÉy.A[y/x‚ÇÄ]
  ‚Äµthis    : ‚àÄ {Œò Œì A t A[t]} (d : Œò / Œì ‚ä¢ A[t]) (p : A[t] ‚â° A [ t ]) ‚Üí Œò / Œì ‚ä¢ ‚Äµ‚àÉ A

  --                 A(x‚ÇÄ)
  --                   ‚ãÆ
  --   ‚àÉy.A[y/x‚ÇÄ]      C
  -- -----------------------
  --           C
  ‚Äµsome    : ‚àÄ {Œò Œì A C} (d : Œò / Œì ‚ä¢ ‚Äµ‚àÉ A) (e : Œò / A ‚à∑ twkFm¬ß Œì ‚ä¢ twkFm C) ‚Üí Œò / Œì ‚ä¢ C

  -- explosion (ex falso quodlibet) as primitive in Heyting arithmetic
  ‚ÄµHAabort : ‚àÄ {Œì C} (d : HA / Œì ‚ä¢ ‚Äµ‚ä•) ‚Üí HA / Œì ‚ä¢ C

  -- double negation elimination (reductio ad absurdum) as primitive in Peano arithmetic
  ‚ÄµPAmagic : ‚àÄ {Œì A} (d : PA / ‚Äµ¬¨ A ‚à∑ Œì ‚ä¢ ‚Äµ‚ä•) ‚Üí PA / Œì ‚ä¢ A

  ‚Äµrefl    : ‚àÄ {Œò Œì t} ‚Üí Œò / Œì ‚ä¢ t ‚Äµ= t
  ‚Äµsym     : ‚àÄ {Œò Œì t u} (d : Œò / Œì ‚ä¢ t ‚Äµ= u) ‚Üí Œò / Œì ‚ä¢ u ‚Äµ= t
  ‚Äµtrans   : ‚àÄ {Œò Œì s t u} (d : Œò / Œì ‚ä¢ s ‚Äµ= t) (e : Œò / Œì ‚ä¢ t ‚Äµ= u) ‚Üí Œò / Œì ‚ä¢ s ‚Äµ= u

  ‚Äµcong    : ‚àÄ {Œò Œì n ts u} (f : Prim n) (i : Fin n) (d : Œò / Œì ‚ä¢ get i ts ‚Äµ= u) ‚Üí
              Œò / Œì ‚ä¢ ‚Äµfun f ts ‚Äµ= ‚Äµfun f (put i ts u)

  ‚Äµdis     : ‚àÄ {Œò Œì t} ‚Üí Œò / Œì ‚ä¢ ‚Äµsuc t ‚Äµ‚â† ‚Äµzero

  ‚Äµinj     : ‚àÄ {Œò Œì t u} (d : Œò / Œì ‚ä¢ ‚Äµsuc t ‚Äµ= ‚Äµsuc u) ‚Üí Œò / Œì ‚ä¢ t ‚Äµ= u

  --   A[0/x‚ÇÄ]    ‚àÄy.A[y/x‚ÇÄ]‚ÜíA[y+1/x‚ÇÄ]
  -- ------------------------------------
  --              ‚àÄy.A[y/x‚ÇÄ]
  ‚Äµind     : ‚àÄ {Œò Œì A} (d : Œò / Œì ‚ä¢ A [ ‚Äµzero ])
               (e : Œò / Œì ‚ä¢ ‚Äµ‚àÄ (A ‚Äµ‚äÉ (texFm (twkFm A)) [ ‚Äµsuc 0 ])) ‚Üí
               Œò / Œì ‚ä¢ ‚Äµ‚àÄ A

  ‚Äµproj    : ‚àÄ {Œò Œì n ts} (i : Fin n) ‚Üí Œò / Œì ‚ä¢ ‚Äµfun (proj i) ts ‚Äµ= get i ts

  ‚Äµcomp    : ‚àÄ {Œò Œì n m ts} (g : Prim m) (fs : Prim¬ß n m) ‚Üí
               Œò / Œì ‚ä¢ ‚Äµfun (comp g fs) ts ‚Äµ= ‚Äµfun g (for fs Œª f ‚Üí ‚Äµfun f ts)

  ‚Äµrec     : ‚àÄ {Œò Œì n s ts} (f : Prim n) (g : Prim (suc (suc n))) ‚Üí
               Œò / Œì ‚ä¢ ‚Äµfun (rec f g) (‚Äµzero ‚à∑ ts) ‚Äµ= ‚Äµfun f ts ‚Äµ‚àß
                 ‚Äµfun (rec f g) (‚Äµsuc s ‚à∑ ts) ‚Äµ= ‚Äµfun g (‚Äµfun (rec f g) (s ‚à∑ ts) ‚à∑ s ‚à∑ ts)

instance
  number‚ä¢ : ‚àÄ {Œò k} {Œì : Fm¬ß k} {A} ‚Üí Number (Œò / Œì ‚ä¢ A)
  number‚ä¢ {Œì = Œì} {A} = record
    { Constraint = Œª m ‚Üí Œì ‚àã‚ü® m ‚ü© A
    ; fromNat    = Œª m {{p}} ‚Üí ‚Äµvar (‚àã#‚Üí‚àã p)
    }

‚Äµcongsuc : ‚àÄ {Œò k} {Œì : Fm¬ß k} {t u} ‚Üí Œò / Œì ‚ä¢ t ‚Äµ= u ‚Üí Œò / Œì ‚ä¢ ‚Äµsuc t ‚Äµ= ‚Äµsuc u
‚Äµcongsuc d = ‚Äµcong suc 0 d


----------------------------------------------------------------------------------------------------

-- renaming for derivations

ren : ‚àÄ {Œò k} {Œì Œì‚Ä≤ : Fm¬ß k} {A} ‚Üí Œì ‚äÜ Œì‚Ä≤ ‚Üí Œò / Œì ‚ä¢ A ‚Üí Œò / Œì‚Ä≤ ‚ä¢ A
ren Œ∑ (‚Äµvar i)        = ‚Äµvar (ren‚àã Œ∑ i)
ren Œ∑ (‚Äµlam d)        = ‚Äµlam (ren (lift‚äÜ Œ∑) d)
ren Œ∑ (d ‚Äµ$ e)        = ren Œ∑ d ‚Äµ$ ren Œ∑ e
ren Œ∑ (‚Äµpair d e)     = ‚Äµpair (ren Œ∑ d) (ren Œ∑ e)
ren Œ∑ (‚Äµfst d)        = ‚Äµfst (ren Œ∑ d)
ren Œ∑ (‚Äµsnd d)        = ‚Äµsnd (ren Œ∑ d)
ren Œ∑ (‚Äµleft d)       = ‚Äµleft (ren Œ∑ d)
ren Œ∑ (‚Äµright d)      = ‚Äµright (ren Œ∑ d)
ren Œ∑ (‚Äµeither c d e) = ‚Äµeither (ren Œ∑ c) (ren (lift‚äÜ Œ∑) d) (ren (lift‚äÜ Œ∑) e)
ren Œ∑ (‚Äµall d)        = ‚Äµall (ren (twk‚äÜ Œ∑) d)
ren Œ∑ (‚Äµone d refl)   = ‚Äµone (ren Œ∑ d) refl
ren Œ∑ (‚Äµthis d refl)  = ‚Äµthis (ren Œ∑ d) refl
ren Œ∑ (‚Äµsome d e)     = ‚Äµsome (ren Œ∑ d) (ren (lift‚äÜ (twk‚äÜ Œ∑)) e)
ren Œ∑ (‚ÄµHAabort d)    = ‚ÄµHAabort (ren Œ∑ d)
ren Œ∑ (‚ÄµPAmagic d)    = ‚ÄµPAmagic (ren (lift‚äÜ Œ∑) d)
ren Œ∑ ‚Äµrefl           = ‚Äµrefl
ren Œ∑ (‚Äµsym d)        = ‚Äµsym (ren Œ∑ d)
ren Œ∑ (‚Äµtrans d e)    = ‚Äµtrans (ren Œ∑ d) (ren Œ∑ e)
ren Œ∑ (‚Äµcong f i d)   = ‚Äµcong f i (ren Œ∑ d)
ren Œ∑ ‚Äµdis            = ‚Äµdis
ren Œ∑ (‚Äµinj d)        = ‚Äµinj (ren Œ∑ d)
ren Œ∑ (‚Äµind d e)      = ‚Äµind (ren Œ∑ d) (ren Œ∑ e)
ren Œ∑ (‚Äµproj i)       = ‚Äµproj i
ren Œ∑ (‚Äµcomp g fs)    = ‚Äµcomp g fs
ren Œ∑ (‚Äµrec f g)      = ‚Äµrec f g

-- weaken derivation by adding one unused derivation variable
wk : ‚àÄ {Œò k} {Œì : Fm¬ß k} {A C} ‚Üí Œò / Œì ‚ä¢ A ‚Üí Œò / C ‚à∑ Œì ‚ä¢ A
wk = ren (wk‚äÜ id‚äÜ)

tren : ‚àÄ {Œò k k‚Ä≤ Œì Œì‚Ä≤ A} (Œ∑ : k ‚â§ k‚Ä≤) ‚Üí Œì ‚äÜ Œì‚Ä≤ ‚Üí Œò / trenFm¬ß Œ∑ Œì ‚ä¢ A ‚Üí Œò / trenFm¬ß Œ∑ Œì‚Ä≤ ‚ä¢ A
tren Œ∑ Œ∂ = ren (tren‚äÜ Œ∑ Œ∂)

twk : ‚àÄ {Œò k} {Œì Œì‚Ä≤ : Fm¬ß k} {A} ‚Üí Œì ‚äÜ Œì‚Ä≤ ‚Üí Œò / twkFm¬ß Œì ‚ä¢ A ‚Üí Œò / twkFm¬ß Œì‚Ä≤ ‚ä¢ A
twk = tren (wk‚â§ id‚â§)


----------------------------------------------------------------------------------------------------

‚Äµabort : ‚àÄ {Œò k} {Œì : Fm¬ß k} {C} ‚Üí Œò / Œì ‚ä¢ ‚Äµ‚ä• ‚Üí Œò / Œì ‚ä¢ C
‚Äµabort {HA} d = ‚ÄµHAabort d
‚Äµabort {PA} d = ‚ÄµPAmagic (wk d)

lem2 : ‚àÄ {k} {Œì : Fm¬ß k} {A} ‚Üí HA / Œì ‚ä¢ A ‚Üí PA / Œì ‚ä¢ A
lem2 (‚Äµvar i)        = ‚Äµvar i
lem2 (‚Äµlam d)        = ‚Äµlam (lem2 d)
lem2 (d ‚Äµ$ e)        = lem2 d ‚Äµ$ lem2 e
lem2 (‚Äµpair d e)     = ‚Äµpair (lem2 d) (lem2 e)
lem2 (‚Äµfst d)        = ‚Äµfst (lem2 d)
lem2 (‚Äµsnd d)        = ‚Äµsnd (lem2 d)
lem2 (‚Äµleft d)       = ‚Äµleft (lem2 d)
lem2 (‚Äµright d)      = ‚Äµright (lem2 d)
lem2 (‚Äµeither c d e) = ‚Äµeither (lem2 c) (lem2 d) (lem2 e)
lem2 (‚Äµall d)        = ‚Äµall (lem2 d)
lem2 (‚Äµone d refl)   = ‚Äµone (lem2 d) refl
lem2 (‚Äµthis d refl)  = ‚Äµthis (lem2 d) refl
lem2 (‚Äµsome d e)     = ‚Äµsome (lem2 d) (lem2 e)
lem2 (‚ÄµHAabort d)    = ‚Äµabort (lem2 d)
lem2 ‚Äµrefl           = ‚Äµrefl
lem2 (‚Äµsym d)        = ‚Äµsym (lem2 d)
lem2 (‚Äµtrans d e)    = ‚Äµtrans (lem2 d) (lem2 e)
lem2 (‚Äµcong f i d)   = ‚Äµcong f i (lem2 d)
lem2 ‚Äµdis            = ‚Äµdis
lem2 (‚Äµinj d)        = ‚Äµinj (lem2 d)
lem2 (‚Äµind d e)      = ‚Äµind (lem2 d) (lem2 e)
lem2 (‚Äµproj i)       = ‚Äµproj i
lem2 (‚Äµcomp g fs)    = ‚Äµcomp g fs
lem2 (‚Äµrec f g)      = ‚Äµrec f g


----------------------------------------------------------------------------------------------------

module _ {Œò k} {Œì : Fm¬ß k} where
  ‚â°‚Üí= : ‚àÄ {t u} ‚Üí t ‚â° u ‚Üí Œò / Œì ‚ä¢ t ‚Äµ= u
  ‚â°‚Üí= refl = ‚Äµrefl

module =-Reasoning {Œò k} {Œì : Fm¬ß k} where
  infix  1 begin_
  infixr 2 _=‚ü®‚ü©_ _=‚ü®_‚ü©_ _=Àò‚ü®_‚ü©_ _‚â°‚ü®_‚ü©_ _‚â°Àò‚ü®_‚ü©_
  infix  3 _‚àé

  begin_ : ‚àÄ {t u} ‚Üí Œò / Œì ‚ä¢ t ‚Äµ= u ‚Üí Œò / Œì ‚ä¢ t ‚Äµ= u
  begin d = d

  _=‚ü®‚ü©_ : ‚àÄ t {u} ‚Üí Œò / Œì ‚ä¢ t ‚Äµ= u ‚Üí Œò / Œì ‚ä¢ t ‚Äµ= u
  t =‚ü®‚ü© d = d

  _=‚ü®_‚ü©_ : ‚àÄ s {t u} ‚Üí Œò / Œì ‚ä¢ s ‚Äµ= t ‚Üí Œò / Œì ‚ä¢ t ‚Äµ= u ‚Üí Œò / Œì ‚ä¢ s ‚Äµ= u
  s =‚ü® d ‚ü© e = ‚Äµtrans d e

  _=Àò‚ü®_‚ü©_ : ‚àÄ s {t u} ‚Üí Œò / Œì ‚ä¢ t ‚Äµ= s ‚Üí Œò / Œì ‚ä¢ t ‚Äµ= u ‚Üí Œò / Œì ‚ä¢ s ‚Äµ= u
  s =Àò‚ü® d ‚ü© e = ‚Äµtrans (‚Äµsym d) e

  _‚â°‚ü®_‚ü©_ : ‚àÄ s {t u} ‚Üí s ‚â° t ‚Üí Œò / Œì ‚ä¢ t ‚Äµ= u ‚Üí Œò / Œì ‚ä¢ s ‚Äµ= u
  s ‚â°‚ü® d ‚ü© e = ‚Äµtrans (‚â°‚Üí= d) e

  _‚â°Àò‚ü®_‚ü©_ : ‚àÄ s {t u} ‚Üí t ‚â° s ‚Üí Œò / Œì ‚ä¢ t ‚Äµ= u ‚Üí Œò / Œì ‚ä¢ s ‚Äµ= u
  s ‚â°Àò‚ü® d ‚ü© e = ‚Äµtrans (‚â°‚Üí= (sym d)) e

  _‚àé : ‚àÄ t ‚Üí Œò / Œì ‚ä¢ t ‚Äµ= t
  t ‚àé = ‚Äµrefl


----------------------------------------------------------------------------------------------------

module _ {Œò k} {Œì : Fm¬ß k} where
  ‚´órefl : ‚àÄ {A} ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚´ó A
  ‚´órefl {A} = ‚Äµpair (‚Äµlam 0) (‚Äµlam 0)

  ‚´ósym : ‚àÄ {A B} ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚´ó B ‚Üí Œò / Œì ‚ä¢ B ‚Äµ‚´ó A
  ‚´ósym d = ‚Äµpair (‚Äµsnd d) (‚Äµfst d)

  ‚´ótrans : ‚àÄ {A B C} ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚´ó B ‚Üí Œò / Œì ‚ä¢ B ‚Äµ‚´ó C ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚´ó C
  ‚´ótrans d e = ‚Äµpair
                  (‚Äµlam (‚Äµfst (wk e) ‚Äµ$ ‚Äµfst (wk d) ‚Äµ$ 0))
                  (‚Äµlam (‚Äµsnd (wk d) ‚Äµ$ ‚Äµsnd (wk e) ‚Äµ$ 0))

  ‚´ócong‚äÉ : ‚àÄ {A A‚Ä≤ B B‚Ä≤} ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚´ó A‚Ä≤ ‚Üí Œò / Œì ‚ä¢ B ‚Äµ‚´ó B‚Ä≤ ‚Üí
              Œò / Œì ‚ä¢ (A ‚Äµ‚äÉ B) ‚Äµ‚´ó (A‚Ä≤ ‚Äµ‚äÉ B‚Ä≤)
  ‚´ócong‚äÉ d e = ‚Äµpair
                  (‚Äµlam (‚Äµlam
                    (‚Äµfst (wk (wk e)) ‚Äµ$ 1 ‚Äµ$ ‚Äµsnd (wk (wk d)) ‚Äµ$ 0)))
                  (‚Äµlam (‚Äµlam
                    (‚Äµsnd (wk (wk e)) ‚Äµ$ 1 ‚Äµ$ ‚Äµfst (wk (wk d)) ‚Äµ$ 0)))

  ‚´ócong‚àß : ‚àÄ {A A‚Ä≤ B B‚Ä≤} ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚´ó A‚Ä≤ ‚Üí Œò / Œì ‚ä¢ B ‚Äµ‚´ó B‚Ä≤ ‚Üí
              Œò / Œì ‚ä¢ A ‚Äµ‚àß B ‚Äµ‚´ó A‚Ä≤ ‚Äµ‚àß B‚Ä≤
  ‚´ócong‚àß d e = ‚Äµpair
                  (‚Äµlam (‚Äµpair
                    (‚Äµfst (wk d) ‚Äµ$ ‚Äµfst 0)
                    (‚Äµfst (wk e) ‚Äµ$ ‚Äµsnd 0)))
                  (‚Äµlam (‚Äµpair
                    (‚Äµsnd (wk d) ‚Äµ$ ‚Äµfst 0)
                    (‚Äµsnd (wk e) ‚Äµ$ ‚Äµsnd 0)))

  ‚´ócong‚à® : ‚àÄ {A A‚Ä≤ B B‚Ä≤} ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚´ó A‚Ä≤ ‚Üí Œò / Œì ‚ä¢ B ‚Äµ‚´ó B‚Ä≤ ‚Üí
              Œò / Œì ‚ä¢ A ‚Äµ‚à® B ‚Äµ‚´ó A‚Ä≤ ‚Äµ‚à® B‚Ä≤
  ‚´ócong‚à® d e = ‚Äµpair
                  (‚Äµlam (‚Äµeither 0
                    (‚Äµleft (‚Äµfst (wk (wk d)) ‚Äµ$ 0))
                    (‚Äµright (‚Äµfst (wk (wk e)) ‚Äµ$ 0))))
                  (‚Äµlam (‚Äµeither 0
                    (‚Äµleft (‚Äµsnd (wk (wk d)) ‚Äµ$ 0))
                    (‚Äµright (‚Äµsnd (wk (wk e)) ‚Äµ$ 0))))

  ‚´ócong‚àÄ : ‚àÄ {A A‚Ä≤} ‚Üí Œò / twkFm¬ß Œì ‚ä¢ A ‚Äµ‚´ó A‚Ä≤ ‚Üí Œò / Œì ‚ä¢ (‚Äµ‚àÄ A) ‚Äµ‚´ó (‚Äµ‚àÄ A‚Ä≤)
  ‚´ócong‚àÄ d = ‚Äµpair
                (‚Äµlam (‚Äµall (twk (wk‚äÜ id‚äÜ) (‚Äµfst d) ‚Äµ$ ‚Äµone 0 TODO1)))
                (‚Äµlam (‚Äµall (twk (wk‚äÜ id‚äÜ) (‚Äµsnd d) ‚Äµ$ ‚Äµone 0 TODO1)))

  ‚´ócong‚àÉ : ‚àÄ {A A‚Ä≤} ‚Üí Œò / twkFm¬ß Œì ‚ä¢ A ‚Äµ‚´ó A‚Ä≤ ‚Üí Œò / Œì ‚ä¢ (‚Äµ‚àÉ A) ‚Äµ‚´ó (‚Äµ‚àÉ A‚Ä≤)
  ‚´ócong‚àÉ d = ‚Äµpair
                (‚Äµlam (‚Äµsome 0 (‚Äµthis (‚Äµfst (wk (wk d)) ‚Äµ$ 0) TODO1)))
                (‚Äµlam (‚Äµsome 0 (‚Äµthis (‚Äµsnd (wk (wk d)) ‚Äµ$ 0) TODO1)))

  ‚â°‚Üí‚´ó : ‚àÄ {A B} ‚Üí A ‚â° B ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚´ó B
  ‚â°‚Üí‚´ó refl = ‚´órefl

module ‚´ó-Reasoning {Œò k} {Œì : Fm¬ß k} where
  infix  1 begin_
  infixr 2 _‚´ó‚ü®‚ü©_ _‚´ó‚ü®_‚ü©_ _‚´óÀò‚ü®_‚ü©_ _‚â°‚ü®_‚ü©_ _‚â°Àò‚ü®_‚ü©_
  infix  3 _‚àé

  begin_ : ‚àÄ {A B} ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚´ó B ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚´ó B
  begin d = d

  _‚´ó‚ü®‚ü©_ : ‚àÄ A {B} ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚´ó B ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚´ó B
  A ‚´ó‚ü®‚ü© d = d

  _‚´ó‚ü®_‚ü©_ : ‚àÄ A {B C} ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚´ó B ‚Üí Œò / Œì ‚ä¢ B ‚Äµ‚´ó C ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚´ó C
  A ‚´ó‚ü® d ‚ü© e = ‚´ótrans d e

  _‚´óÀò‚ü®_‚ü©_ : ‚àÄ A {B C} ‚Üí Œò / Œì ‚ä¢ B ‚Äµ‚´ó A ‚Üí Œò / Œì ‚ä¢ B ‚Äµ‚´ó C ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚´ó C
  A ‚´óÀò‚ü® d ‚ü© e = ‚´ótrans (‚´ósym d) e

  _‚â°‚ü®_‚ü©_ : ‚àÄ A {B C} ‚Üí A ‚â° B ‚Üí Œò / Œì ‚ä¢ B ‚Äµ‚´ó C ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚´ó C
  A ‚â°‚ü® d ‚ü© e = ‚´ótrans (‚â°‚Üí‚´ó d) e

  _‚â°Àò‚ü®_‚ü©_ : ‚àÄ A {B C} ‚Üí B ‚â° A ‚Üí Œò / Œì ‚ä¢ B ‚Äµ‚´ó C ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚´ó C
  A ‚â°Àò‚ü® d ‚ü© e = ‚´ótrans (‚â°‚Üí‚´ó (sym d)) e

  _‚àé : ‚àÄ A ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚´ó A
  A ‚àé = ‚´órefl


----------------------------------------------------------------------------------------------------

-- extended middle

-- constructive
-- TODO: belongs to object-level continuation monad
module _ {Œò k} {Œì : Fm¬ß k} where
  ‚Äµnnem : ‚àÄ {A} ‚Üí Œò / Œì ‚ä¢ ‚Äµ¬¨ ‚Äµ¬¨ (A ‚Äµ‚à® ‚Äµ¬¨ A)
  ‚Äµnnem = ‚Äµlam (0 ‚Äµ$ ‚Äµright (‚Äµlam (1 ‚Äµ$ ‚Äµleft 0)))

  ‚Äµdni : ‚àÄ {A} ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚äÉ ‚Äµ¬¨ ‚Äµ¬¨ A
  ‚Äµdni = ‚Äµlam (‚Äµlam (0 ‚Äµ$ 1))

-- TODO: continuation monad
nnem : ‚àÄ {ùí∂} {A : Set ùí∂} ‚Üí ¬¨ ¬¨ (A ‚äé ¬¨ A)
nnem = Œª k ‚Üí k (right (Œª k‚Ä≤ ‚Üí k (left k‚Ä≤)))

dni : ‚àÄ {ùí∂} {A : Set ùí∂} ‚Üí A ‚Üí ¬¨ ¬¨ A
dni x = Œª k ‚Üí k x

-- non-constructive
-- TODO: actually EM
module _ {k} {Œì : Fm¬ß k} where
  ‚Äµdne : ‚àÄ {A} ‚Üí PA / Œì ‚ä¢ ‚Äµ¬¨ ‚Äµ¬¨ A ‚Äµ‚äÉ A
  ‚Äµdne = ‚Äµlam (‚ÄµPAmagic (1 ‚Äµ$ 0))

  ‚Äµdn : ‚àÄ {A} ‚Üí PA / Œì ‚ä¢ ‚Äµ¬¨ ‚Äµ¬¨ A ‚Äµ‚´ó A
  ‚Äµdn = ‚Äµpair ‚Äµdne ‚Äµdni

  ‚Äµem : ‚àÄ {A} ‚Üí PA / Œì ‚ä¢ A ‚Äµ‚à® ‚Äµ¬¨ A
  ‚Äµem = ‚Äµdne ‚Äµ$ ‚Äµnnem


----------------------------------------------------------------------------------------------------

-- TODO: other non-constructive tautologies

{-A     B    ¬¨A    ¬¨B    A‚àßB   A‚à®B   A‚äÉB   A‚´óB ¬¨A‚àßB  ¬¨A‚à®B  ¬¨A‚äÉB  ¬¨A‚´óB  A‚àß¬¨B  A‚à®¬¨B  A‚äÉ¬¨B A‚´ó¬¨B
----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
  0     0     1     1     0     0     1     1     0     1     0     0     0     1     1     0
  0     1     1     0     0     1     1     0     1     1     1     1     0     0     1     1
  1     0     0     1     0     1     0     0     0     0     1     1     1     1     1     1
  1     1     0     0     1     1     1     1     0     1     1     0     0     1     0     0-}

-- module _ where
--   ‚´ótau1 : ‚àÄ {A B} ‚Üí PA / Œì ‚ä¢ A ‚Äµ‚äÉ B ‚Äµ‚´ó ‚Äµ¬¨ A ‚Äµ‚à® B
--   ‚´ótau1 = {!!}
--
--   ‚´ótau2 : ‚àÄ {A B} ‚Üí PA / Œì ‚ä¢ (‚Äµ¬¨ A ‚Äµ‚´ó B) ‚Äµ‚´ó (A ‚Äµ‚´ó ‚Äµ¬¨ B)
--   ‚´ótau2 = {!!}


----------------------------------------------------------------------------------------------------

-- de Morgan‚Äôs laws

-- constructive
module _ {Œò k} {Œì : Fm¬ß k} where
  pdm1 : ‚àÄ {A B} ‚Üí Œò / Œì ‚ä¢ ‚Äµ¬¨ A ‚Äµ‚à® ‚Äµ¬¨ B ‚Äµ‚äÉ ‚Äµ¬¨ (A ‚Äµ‚àß B)
  pdm1 = ‚Äµlam (‚Äµlam (‚Äµeither 1
           (0 ‚Äµ$ ‚Äµfst 1)
           (0 ‚Äµ$ ‚Äµsnd 1)))

  qdm1 : ‚àÄ {A} ‚Üí Œò / Œì ‚ä¢ ‚Äµ‚àÉ (‚Äµ¬¨ A) ‚Äµ‚äÉ ‚Äµ¬¨ (‚Äµ‚àÄ A)
  qdm1 = ‚Äµlam (‚Äµlam (‚Äµsome 1
           (0 ‚Äµ$ ‚Äµone 1 TODO1)))

  npdm1 : ‚àÄ {A B} ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚à® B ‚Äµ‚äÉ ‚Äµ¬¨ (‚Äµ¬¨ A ‚Äµ‚àß ‚Äµ¬¨ B)
  npdm1 = ‚Äµlam (‚Äµlam (‚Äµabort (‚Äµeither 1
            (‚Äµfst 1 ‚Äµ$ 0)
            (‚Äµsnd 1 ‚Äµ$ 0))))

  nqdm1 : ‚àÄ {A} ‚Üí Œò / Œì ‚ä¢ ‚Äµ‚àÉ A ‚Äµ‚äÉ ‚Äµ¬¨ (‚Äµ‚àÄ (‚Äµ¬¨ A))
  nqdm1 = ‚Äµlam (‚Äµlam (‚Äµabort (‚Äµsome 1
            (‚Äµone 1 TODO1 ‚Äµ$ 0))))

  pdm2 : ‚àÄ {A B} ‚Üí Œò / Œì ‚ä¢ ‚Äµ¬¨ A ‚Äµ‚àß ‚Äµ¬¨ B ‚Äµ‚äÉ ‚Äµ¬¨ (A ‚Äµ‚à® B)
  pdm2 = ‚Äµlam (‚Äµlam (‚Äµeither 0
           (‚Äµfst 2 ‚Äµ$ 0)
           (‚Äµsnd 2 ‚Äµ$ 0)))

  qdm2 : ‚àÄ {A} ‚Üí Œò / Œì ‚ä¢ ‚Äµ‚àÄ (‚Äµ¬¨ A) ‚Äµ‚äÉ ‚Äµ¬¨ (‚Äµ‚àÉ A)
  qdm2 = ‚Äµlam (‚Äµlam (‚Äµsome 0
           (‚Äµone 2 TODO1 ‚Äµ$ 0)))

  npdm2 : ‚àÄ {A B} ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚àß B ‚Äµ‚äÉ ‚Äµ¬¨ (‚Äµ¬¨ A ‚Äµ‚à® ‚Äµ¬¨ B)
  npdm2 = ‚Äµlam (‚Äµlam (‚Äµabort (‚Äµeither 0
            (0 ‚Äµ$ ‚Äµfst 2)
            (0 ‚Äµ$ ‚Äµsnd 2))))

  nqdm2 : ‚àÄ {A} ‚Üí Œò / Œì ‚ä¢ ‚Äµ‚àÄ A ‚Äµ‚äÉ ‚Äµ¬¨ (‚Äµ‚àÉ (‚Äµ¬¨ A))
  nqdm2 = ‚Äµlam (‚Äµlam (‚Äµabort (‚Äµsome 0
            (0 ‚Äµ$ ‚Äµone 2 TODO1))))

  pdm3 : ‚àÄ {A B} ‚Üí Œò / Œì ‚ä¢ ‚Äµ¬¨ (A ‚Äµ‚à® B) ‚Äµ‚äÉ ‚Äµ¬¨ A ‚Äµ‚àß ‚Äµ¬¨ B
  pdm3 = ‚Äµlam (‚Äµpair
           (‚Äµlam (1 ‚Äµ$ ‚Äµleft 0))
           (‚Äµlam (1 ‚Äµ$ ‚Äµright 0)))

  qdm3 : ‚àÄ {A} ‚Üí Œò / Œì ‚ä¢ ‚Äµ¬¨ (‚Äµ‚àÉ A) ‚Äµ‚äÉ ‚Äµ‚àÄ (‚Äµ¬¨ A)
  qdm3 = ‚Äµlam (‚Äµall (‚Äµlam
           (1 ‚Äµ$ ‚Äµthis 0 TODO1)))

-- TODO: non-constructive
-- module _ {k} {Œì : Fm¬ß k} where
--   npdm3 : ‚àÄ {A B} ‚Üí PA / Œì ‚ä¢ ‚Äµ¬¨ (‚Äµ¬¨ A ‚Äµ‚à® ‚Äµ¬¨ B) ‚Äµ‚äÉ A ‚Äµ‚àß B
--   npdm3 = {!!}
--
--   nqdm3 : ‚àÄ {A} ‚Üí PA / Œì ‚ä¢ ‚Äµ¬¨ (‚Äµ‚àÉ (‚Äµ¬¨ A)) ‚Äµ‚äÉ ‚Äµ‚àÄ A
--   nqdm3 = {!!}
--
--   pdm4 : ‚àÄ {A B} ‚Üí PA / Œì ‚ä¢ ‚Äµ¬¨ (A ‚Äµ‚àß B) ‚Äµ‚äÉ ‚Äµ¬¨ A ‚Äµ‚à® ‚Äµ¬¨ B
--   pdm4 = {!!}
--
--   qdm4 : ‚àÄ {A} ‚Üí PA / Œì ‚ä¢ ‚Äµ¬¨ (‚Äµ‚àÄ A) ‚Äµ‚äÉ ‚Äµ‚àÉ (‚Äµ¬¨ A)
--   qdm4 = {!!}
--
--   npdm4 : ‚àÄ {A B} ‚Üí PA / Œì ‚ä¢ ‚Äµ¬¨ (‚Äµ¬¨ A ‚Äµ‚àß ‚Äµ¬¨ B) ‚Äµ‚äÉ A ‚Äµ‚à® B
--   npdm4 = {!!}
--
--   nqdm4 : ‚àÄ {A} ‚Üí PA / Œì ‚ä¢ ‚Äµ¬¨ (‚Äµ‚àÄ (‚Äµ¬¨ A)) ‚Äµ‚äÉ ‚Äµ‚àÉ A
--   nqdm4 = {!!}


----------------------------------------------------------------------------------------------------

-- quantifier-free formulas

data IsQFree {k} : Fm k ‚Üí Set where
  _‚Äµ‚äÉ_ : ‚àÄ {A B} (p : IsQFree A) (q : IsQFree B) ‚Üí IsQFree (A ‚Äµ‚äÉ B)
  _‚Äµ‚àß_ : ‚àÄ {A B} (p : IsQFree A) (q : IsQFree B) ‚Üí IsQFree (A ‚Äµ‚àß B)
  _‚Äµ‚à®_ : ‚àÄ {A B} (p : IsQFree A) (q : IsQFree B) ‚Üí IsQFree (A ‚Äµ‚à® B)
  ‚Äµ‚ä•  : IsQFree ‚Äµ‚ä•
  _‚Äµ=_ : ‚àÄ {t u} ‚Üí IsQFree (t ‚Äµ= u)

module _ where
  open =-Reasoning

  goal goal‚Ä≤ : ‚àÄ {Œò k} {Œì : Fm¬ß k} ‚Üí Œò / Œì ‚ä¢
                 ‚Äµfun (const 1) (tab ‚Äµvar) ‚Äµ= ‚Äµzero ‚Äµ‚äÉ ‚Äµsuc ‚Äµzero ‚Äµ= ‚Äµzero

  goal = ‚Äµlam
           (‚Äµtrans
             (‚Äµtrans
               (‚Äµcong suc zero
                 (‚Äµsym (‚Äµcomp zero [])))
               (‚Äµsym (‚Äµcomp suc (comp zero [] ‚à∑ []))))
             (‚Äµvar 0))

  goal‚Ä≤ = ‚Äµlam
            (begin
              ‚Äµsuc ‚Äµzero
            =‚ü®‚ü©
              ‚Äµfun suc (‚Äµfun zero [] ‚à∑ [])
            =‚ü® ‚Äµcong suc zero (
                begin
                  ‚Äµfun zero []
                =Àò‚ü® ‚Äµcomp zero [] ‚ü©
                  ‚Äµfun (comp zero []) (tab ‚Äµvar)
                ‚àé)
              ‚ü©
              ‚Äµfun suc (‚Äµfun (comp zero []) (tab ‚Äµvar) ‚à∑ [])
            =Àò‚ü® ‚Äµcomp suc (comp zero [] ‚à∑ []) ‚ü©
              ‚Äµfun (comp suc (comp zero [] ‚à∑ [])) (tab ‚Äµvar)
            =‚ü®‚ü©
              ‚Äµfun (const 1) (tab ‚Äµvar)
            =‚ü® ‚Äµvar 0 ‚ü©
              ‚Äµzero
            ‚àé)


-- TODO: lemma 3

-- lem3 : ‚àÄ {Œò k} {Œì : Fm¬ß k} (A : Fm k) {{_ : IsQFree A}} ‚Üí Œ£ (Prim k) Œª f ‚Üí
--          Œò / Œì ‚ä¢ A ‚Äµ‚´ó ‚Äµfun f (tab ‚Äµvar) ‚Äµ= ‚Äµzero
-- lem3 (A ‚Äµ‚äÉ B) = {!!}
-- lem3 (A ‚Äµ‚àß B) = {!!}
-- lem3 (A ‚Äµ‚à® B) = {!!}
-- lem3 ‚Äµ‚ä•      = const 1 , ‚Äµpair (‚Äµlam (abort 0)) (‚Äµlam (‚Äµdis ‚Äµ$ goal ‚Äµ$ 0))
-- lem3 (t ‚Äµ= u) = {!!}


----------------------------------------------------------------------------------------------------

-- TODO: definition of Œ†‚Å∞‚ÇÇ


-- TODO: lemma 4


----------------------------------------------------------------------------------------------------

-- object-level continuation/double negation monad/applicative/functor
-- TODO: add laws?

‚Äµreturn : ‚àÄ {Œò k} {Œì : Fm¬ß k} {A} ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚äÉ ‚Äµ¬¨ ‚Äµ¬¨ A
‚Äµreturn = ‚Äµlam (‚Äµlam (0 ‚Äµ$ 1))

-- return : ‚àÄ {Œò k} {Œì : Fm¬ß k} {A} ‚Üí Œò / Œì ‚ä¢ A ‚Üí Œò / Œì ‚ä¢ ‚Äµ¬¨ ‚Äµ¬¨ A
-- return d = ‚Äµreturn ‚Äµ$ d

‚Äµbind : ‚àÄ {Œò k} {Œì : Fm¬ß k} {A B} ‚Üí Œò / Œì ‚ä¢ ‚Äµ¬¨ ‚Äµ¬¨ A ‚Äµ‚äÉ (A ‚Äµ‚äÉ ‚Äµ¬¨ ‚Äµ¬¨ B) ‚Äµ‚äÉ ‚Äµ¬¨ ‚Äµ¬¨ B
‚Äµbind = ‚Äµlam (‚Äµlam (‚Äµlam (2 ‚Äµ$ ‚Äµlam ((2 ‚Äµ$ 0) ‚Äµ$ 1))))

infixl 1 _>>=_
_>>=_ : ‚àÄ {Œò k} {Œì : Fm¬ß k} {A B} ‚Üí Œò / Œì ‚ä¢ ‚Äµ¬¨ ‚Äµ¬¨ A ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚äÉ ‚Äµ¬¨ ‚Äµ¬¨ B ‚Üí Œò / Œì ‚ä¢ ‚Äµ¬¨ ‚Äµ¬¨ B
d >>= e = (‚Äµbind ‚Äµ$ d) ‚Äµ$ e

‚Äµjoin : ‚àÄ {Œò k} {Œì : Fm¬ß k} {A} ‚Üí Œò / Œì ‚ä¢ ‚Äµ¬¨ ‚Äµ¬¨ ‚Äµ¬¨ ‚Äµ¬¨ A ‚Äµ‚äÉ ‚Äµ¬¨ ‚Äµ¬¨ A
‚Äµjoin = ‚Äµlam ((‚Äµbind ‚Äµ$ 0) ‚Äµ$ ‚Äµlam 0)

-- join : ‚àÄ {Œò k} {Œì : Fm¬ß k} {A} ‚Üí Œò / Œì ‚ä¢ ‚Äµ¬¨ ‚Äµ¬¨ ‚Äµ¬¨ ‚Äµ¬¨ A ‚Üí Œò / Œì ‚ä¢ ‚Äµ¬¨ ‚Äµ¬¨ A
-- join d = d >>= ‚Äµlam 0

‚Äµapply : ‚àÄ {Œò k} {Œì : Fm¬ß k} {A B} ‚Üí Œò / Œì ‚ä¢ ‚Äµ¬¨ ‚Äµ¬¨ (A ‚Äµ‚äÉ B) ‚Äµ‚äÉ ‚Äµ¬¨ ‚Äµ¬¨ A ‚Äµ‚äÉ ‚Äµ¬¨ ‚Äµ¬¨ B
‚Äµapply = ‚Äµlam (‚Äµlam ((‚Äµbind ‚Äµ$ 1) ‚Äµ$ ‚Äµlam ((‚Äµbind ‚Äµ$ 1) ‚Äµ$ ‚Äµlam (‚Äµreturn ‚Äµ$ 1 ‚Äµ$ 0))))

infixl 4 _‚äõ_
_‚äõ_ : ‚àÄ {Œò k} {Œì : Fm¬ß k} {A B} ‚Üí Œò / Œì ‚ä¢ ‚Äµ¬¨ ‚Äµ¬¨ (A ‚Äµ‚äÉ B) ‚Üí Œò / Œì ‚ä¢ ‚Äµ¬¨ ‚Äµ¬¨ A ‚Üí Œò / Œì ‚ä¢ ‚Äµ¬¨ ‚Äµ¬¨ B
d ‚äõ e = d >>= ‚Äµlam (wk e >>= ‚Äµlam (‚Äµreturn ‚Äµ$ 1 ‚Äµ$ 0))

‚Äµmap : ‚àÄ {Œò k} {Œì : Fm¬ß k} {A B} ‚Üí Œò / Œì ‚ä¢ (A ‚Äµ‚äÉ B) ‚Äµ‚äÉ ‚Äµ¬¨ ‚Äµ¬¨ A ‚Äµ‚äÉ ‚Äµ¬¨ ‚Äµ¬¨ B
‚Äµmap = ‚Äµlam (‚Äµlam ((‚Äµapply ‚Äµ$ ‚Äµreturn ‚Äµ$ 1) ‚Äµ$ 0))

infixl 4 _<$>_
_<$>_ : ‚àÄ {Œò k} {Œì : Fm¬ß k} {A B} ‚Üí Œò / Œì ‚ä¢ A ‚Äµ‚äÉ B ‚Üí Œò / Œì ‚ä¢ ‚Äµ¬¨ ‚Äµ¬¨ A ‚Üí Œò / Œì ‚ä¢ ‚Äµ¬¨ ‚Äµ¬¨ B
d <$> e = ‚Äµreturn ‚Äµ$ d ‚äõ e


----------------------------------------------------------------------------------------------------

-- meta-level continuation/double negation monad/applicative/functor
-- TODO: add laws? delete?

-- return : ‚àÄ {ùí∂} {A : Set ùí∂} ‚Üí A ‚Üí ¬¨ ¬¨ A
-- return x = Œª k ‚Üí k x
--
-- bind : ‚àÄ {ùí∂ ùí∑} {A : Set ùí∂} {B : Set ùí∑} ‚Üí ¬¨ ¬¨ A ‚Üí (A ‚Üí ¬¨ ¬¨ B) ‚Üí ¬¨ ¬¨ B
-- bind mx f = Œª k ‚Üí mx (Œª x ‚Üí f x k)
--
-- join : ‚àÄ {ùí∂} {A : Set ùí∂} ‚Üí ¬¨ ¬¨ ¬¨ ¬¨ A ‚Üí ¬¨ ¬¨ A
-- join mmx = bind mmx (Œª mx ‚Üí mx)
--
-- apply : ‚àÄ {ùí∂ ùí∑} {A : Set ùí∂} {B : Set ùí∑} ‚Üí ¬¨ ¬¨ (A ‚Üí B) ‚Üí ¬¨ ¬¨ A ‚Üí ¬¨ ¬¨ B
-- apply mf mx = bind mf (Œª f ‚Üí bind mx (Œª x ‚Üí return (f x)))
--
-- map : ‚àÄ {ùí∂ ùí∑} {A : Set ùí∂} {B : Set ùí∑} ‚Üí (A ‚Üí B) ‚Üí ¬¨ ¬¨ A ‚Üí ¬¨ ¬¨ B
-- map f mx = apply (return f) mx


----------------------------------------------------------------------------------------------------

-- double negation translation

_¬∞ : ‚àÄ {k} ‚Üí Fm k ‚Üí Fm k
(A ‚Äµ‚äÉ B) ¬∞ = A ¬∞ ‚Äµ‚äÉ B ¬∞
(A ‚Äµ‚àß B) ¬∞ = A ¬∞ ‚Äµ‚àß B ¬∞
(A ‚Äµ‚à® B) ¬∞ = ‚Äµ¬¨ ‚Äµ¬¨ (A ¬∞ ‚Äµ‚à® B ¬∞)
(‚Äµ‚àÄ A) ¬∞   = ‚Äµ‚àÄ (A ¬∞)
(‚Äµ‚àÉ A) ¬∞   = ‚Äµ¬¨ ‚Äµ¬¨ ‚Äµ‚àÉ (A ¬∞)
‚Äµ‚ä• ¬∞      = ‚Äµ‚ä•
(t ‚Äµ= u) ¬∞ = ‚Äµ¬¨ ‚Äµ¬¨ (t ‚Äµ= u)

_¬∞¬ß : ‚àÄ {k} ‚Üí Fm¬ß k ‚Üí Fm¬ß k
[] ¬∞¬ß      = []
(A ‚à∑ Œì) ¬∞¬ß = A ¬∞ ‚à∑ Œì ¬∞¬ß


postulate
  TODO2 : ‚àÄ {k} {A : Fm (suc k)} {t} ‚Üí (A [ t ]) ¬∞ ‚â° (A ¬∞) [ t ]
  TODO3 : ‚àÄ {Œò k} {Œì : Fm¬ß k} {A} ‚Üí Œò / (twkFm¬ß Œì) ¬∞¬ß ‚ä¢ A ‚Üí Œò / twkFm¬ß (Œì ¬∞¬ß) ‚ä¢ A
  TODO4 : ‚àÄ {Œò k} {Œì : Fm¬ß k} {A t} ‚Üí Œò / Œì ‚ä¢ (A [ t ]) ¬∞ ‚Üí Œò / Œì ‚ä¢ (A ¬∞) [ t ]
  TODO5 : ‚àÄ {Œò k} {Œì : Fm¬ß k} {A t} ‚Üí Œò / Œì ‚ä¢ ‚Äµ‚àÄ (A ¬∞ ‚Äµ‚äÉ (texFm (twkFm A) [ t ]) ¬∞) ‚Üí
            Œò / Œì ‚ä¢ ‚Äµ‚àÄ (A ¬∞ ‚Äµ‚äÉ texFm (twkFm (A ¬∞)) [ t ])


-- TODO: lemma 5

module _ where
  open ‚´ó-Reasoning

  lem5-1 : ‚àÄ {k} {Œì : Fm¬ß k} {A} ‚Üí PA / Œì ‚ä¢ A ¬∞ ‚Äµ‚´ó A
  lem5-1 {A = A ‚Äµ‚äÉ B} = ‚´ócong‚äÉ lem5-1 lem5-1
  lem5-1 {A = A ‚Äµ‚àß B} = ‚´ócong‚àß lem5-1 lem5-1
  lem5-1 {A = A ‚Äµ‚à® B} = begin
                          ‚Äµ¬¨ ‚Äµ¬¨ (A ¬∞ ‚Äµ‚à® B ¬∞)
                        ‚´ó‚ü® ‚Äµdn ‚ü©
                          A ¬∞ ‚Äµ‚à® B ¬∞
                        ‚´ó‚ü® ‚´ócong‚à® lem5-1 lem5-1 ‚ü©
                          A ‚Äµ‚à® B
                        ‚àé
  lem5-1 {A = ‚Äµ‚àÄ A}   = ‚´ócong‚àÄ lem5-1
  lem5-1 {A = ‚Äµ‚àÉ A}   = begin
                          ‚Äµ¬¨ ‚Äµ¬¨ ‚Äµ‚àÉ (A ¬∞)
                        ‚´ó‚ü® ‚Äµdn ‚ü©
                          ‚Äµ‚àÉ (A ¬∞)
                        ‚´ó‚ü® ‚´ócong‚àÉ lem5-1 ‚ü©
                          ‚Äµ‚àÉ A
                        ‚àé
  lem5-1 {A = ‚Äµ‚ä•}    = ‚´órefl
  lem5-1 {A = t ‚Äµ= u} = ‚Äµdn

  lem5-2 : ‚àÄ {Œò k} {Œì : Fm¬ß k} {A} ‚Üí Œò / ‚Äµ¬¨ ‚Äµ¬¨ (A ¬∞) ‚à∑ Œì ‚ä¢ A ¬∞
  lem5-2 {A = A ‚Äµ‚äÉ B} = ‚Äµlam (‚Äµlam lem5-2 ‚Äµ$ ‚Äµlam
                          (2 ‚Äµ$ ‚Äµlam
                            (1 ‚Äµ$ 0 ‚Äµ$ 2)))
  lem5-2 {A = A ‚Äµ‚àß B} = ‚Äµpair
                          (‚Äµlam lem5-2 ‚Äµ$ ‚Äµlam
                            (1 ‚Äµ$ ‚Äµlam
                              (1 ‚Äµ$ ‚Äµfst 0)))
                          (‚Äµlam lem5-2 ‚Äµ$ ‚Äµlam
                            (1 ‚Äµ$ ‚Äµlam
                              (1 ‚Äµ$ ‚Äµsnd 0)))
  lem5-2 {A = A ‚Äµ‚à® B} = ‚Äµjoin ‚Äµ$ 0
  lem5-2 {A = ‚Äµ‚àÄ A}   = ‚Äµall (‚Äµlam lem5-2 ‚Äµ$ ‚Äµlam
                          (1 ‚Äµ$ ‚Äµlam
                            (1 ‚Äµ$ ‚Äµone 0 TODO1)))
  lem5-2 {A = ‚Äµ‚àÉ A}   = ‚Äµjoin ‚Äµ$ 0
  lem5-2 {A = ‚Äµ‚ä•}    = 0 ‚Äµ$ ‚Äµlam 0
  lem5-2 {A = t ‚Äµ= u} = ‚Äµjoin ‚Äµ$ 0

  lem5-3‚àã : ‚àÄ {k} {Œì : Fm¬ß k} {A} ‚Üí Œì ‚àã A ‚Üí Œì ¬∞¬ß ‚àã A ¬∞
  lem5-3‚àã zero    = zero
  lem5-3‚àã (suc i) = suc (lem5-3‚àã i)

  lem5-3 : ‚àÄ {Œò k} {Œì : Fm¬ß k} {A} ‚Üí PA / Œì ‚ä¢ A ‚Üí Œò / Œì ¬∞¬ß ‚ä¢ A ¬∞
  lem5-3 (‚Äµvar i)           = ‚Äµvar (lem5-3‚àã i)
  lem5-3 (‚Äµlam d)           = ‚Äµlam (lem5-3 d)
  lem5-3 (d ‚Äµ$ e)           = lem5-3 d ‚Äµ$ lem5-3 e
  lem5-3 (‚Äµpair d e)        = ‚Äµpair (lem5-3 d) (lem5-3 e)
  lem5-3 (‚Äµfst d)           = ‚Äµfst (lem5-3 d)
  lem5-3 (‚Äµsnd d)           = ‚Äµsnd (lem5-3 d)
  lem5-3 (‚Äµleft d)          = ‚Äµreturn ‚Äµ$ ‚Äµleft (lem5-3 d)
  lem5-3 (‚Äµright d)         = ‚Äµreturn ‚Äµ$ ‚Äµright (lem5-3 d)
  lem5-3 (‚Äµeither c d e)    = {!!}
  lem5-3 (‚Äµall d)           = ‚Äµall (TODO3 (lem5-3 d))
  lem5-3 (‚Äµone d refl)      = ‚Äµone (lem5-3 d) TODO2
  lem5-3 (‚Äµthis d refl)     = ‚Äµreturn ‚Äµ$ ‚Äµthis (lem5-3 d) TODO2
  lem5-3 (‚Äµsome d e)        = {!!}
  lem5-3 (‚ÄµPAmagic d)       = ‚Äµlam lem5-2 ‚Äµ$ ‚Äµlam (lem5-3 d)
  lem5-3 ‚Äµrefl              = ‚Äµreturn ‚Äµ$ ‚Äµrefl
  lem5-3 (‚Äµsym d)           = (‚Äµbind ‚Äµ$ lem5-3 d) ‚Äµ$ ‚Äµlam
                                (‚Äµreturn ‚Äµ$ ‚Äµsym 0)
  lem5-3 (‚Äµtrans d e)       = (‚Äµbind ‚Äµ$ lem5-3 d) ‚Äµ$ ‚Äµlam
                                ((‚Äµbind ‚Äµ$ wk (lem5-3 e)) ‚Äµ$ ‚Äµlam
                                  (‚Äµreturn ‚Äµ$ ‚Äµtrans 1 0))
  lem5-3 (‚Äµcong f i d)      = (‚Äµbind ‚Äµ$ lem5-3 d) ‚Äµ$ ‚Äµlam
                                (‚Äµreturn ‚Äµ$ ‚Äµcong f i 0)
  lem5-3 ‚Äµdis               = ‚Äµreturn ‚Äµ$ ‚Äµdis
  lem5-3 (‚Äµinj d)           = (‚Äµbind ‚Äµ$ lem5-3 d) ‚Äµ$ ‚Äµlam
                                (‚Äµreturn ‚Äµ$ ‚Äµinj 0)
  lem5-3 (‚Äµind d e)         = ‚Äµind (TODO4 (lem5-3 d)) (TODO5 (lem5-3 e))
  lem5-3 (‚Äµproj i)          = ‚Äµreturn ‚Äµ$ ‚Äµproj i
  lem5-3 (‚Äµcomp g fs)       = ‚Äµreturn ‚Äµ$ ‚Äµcomp g fs
  lem5-3 (‚Äµrec {s = s} f g) = ‚Äµpair
                                (‚Äµreturn ‚Äµ$ ‚Äµfst (‚Äµrec {s = s} f g))
                                (‚Äµreturn ‚Äµ$ ‚Äµsnd (‚Äµrec f g))

  -- TODO: "Note that the converse of 3 trivially holds wih 1."
  lem5-3‚Åª¬π : ‚àÄ {Œò k} {Œì : Fm¬ß k} {A} ‚Üí Œò / Œì ¬∞¬ß ‚ä¢ A ¬∞ ‚Üí PA / Œì ‚ä¢ A
  lem5-3‚Åª¬π d = {!!}

  -- TODO: "A counterexample for 4 is Œ¶ = ¬¨‚àÄxŒ®x."
  lem5-4 : ‚àÄ {k} {Œì : Fm¬ß k} ‚Üí ¬¨ (‚àÄ {A} ‚Üí HA / A ‚à∑ Œì ‚ä¢ A ¬∞)
  lem5-4 d = {!!}


----------------------------------------------------------------------------------------------------

-- TODO: A-translation

-- TODO: lemma 6


----------------------------------------------------------------------------------------------------

-- TODO: lemma 7

-- TODO: corollary 8

-- TODO: theorem 1


----------------------------------------------------------------------------------------------------
